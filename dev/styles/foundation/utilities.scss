// ==|== utilities ===============================================================
// =============================================================================

// Functions
// -----------------------------------------------------------------------------
// Returns the list of available names in a given map.
// @param {Map} $map - The map of data to list the names from.
// @param {Number} $map - The level of depth to get names from.
// @return {String} The list of names in the map.
@function available-names($map, $level: 1) {
  @if type-of($map) != 'map' { @return null; }

  $output: '';
  $newline: '\A ';

  @if $level == 1 {
    @each $key, $value in $map {
      $output: $output + '#{$newline}- #{$key} #{available-names($value, $level + 1)}';
    }
  } @else {
    $output: '(';
    $i: 1;

    @each $key, $value in $map {
      $sep: if($i < length($map), ', ', '');
      $output: $output + '#{$key}#{$sep}#{available-names($value, $level + 1)}';
      $i: $i + 1;
    }

    $output: $output + ')';
  }

  @return $output;
}

// Returns any unitless number as a REM unit
// @param {Number} $value - any number to be converted
// @return {Number} The converted value in REM
@function numToRem($number) {
  @return ($number / 10) + rem;
}

// Returns a unitless number
// @param {Number} $value - any number to have its unit removed
// @return {Number} The converted value as a number
@function stripUnit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Returns the value in rem for a given pixel value.
// @param {Number} $value - The pixel value to be converted.
// @return {Number} The converted value in rem.
@function pxToRem($value) {
  @if unit($value) != 'px' {
    @error 'Value must be in px.';
  }

  @return $value / $base-font-size * 1rem;
}

// Returns the value in pixels for a given rem value.
// @param {Number} $value - The rem value to be converted.
// @return {Number} The converted value in pixels.
@function px($value) {
  @if unit($value) != 'rem' {
    @error 'Value must be in rem.';
  }

  @return ($value / 1rem) * $base-font-size;
}

// Returns the opposite direction
// @param {String} $direction
// @return {String} The opposite direction
@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: (
    top: 'bottom',
    right: 'left',
    bottom: 'top',
    left: 'right'
  );

  @each $direction in $directions {
    $direction: to-lower-case($direction);

    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    } @else {
      @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }

  @return $opposite-directions;
}

// Mixins
// -----------------------------------------------------------------------------
@mixin page-scroll-lock {
  &,
  body {
    height: 100%;
  }

  &[data-scrollable="locked"],
  &[data-scrollable="locked"] body {
    overflow: hidden;
    max-height: 100vh;
  }
}

@mixin visibility($state) {
  @if ($state == "off") or ($state == "none") or ($state == "hide") or ($state == "hidden") {
    opacity: 0;
    visibility: hidden;
  } @else {
    opacity: 1;
    visibility: visible;
  }
}

@mixin position-cover($position: absolute, $index: 1) {
  @if not index(static relative absolute fixed sticky reset, $position) {
    @error "Positions can be: `static`, `relative`, `absolute`, `fixed`, `sticky`, or `reset`.";
  }

  z-index: $index;

  @if $position == "reset" {
    position: static;
    top: auto;
    right: auto;
    bottom: auto;
    left: auto;
    margin: 0;
  } @else {
    position: $position;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    margin: auto;
  }
}

@mixin background-cover($image: none, $color: transparent) {
  @if $image != none or $image != "" {
    background-image: url($image);
  }

  background-color: $color;
  background-repeat: no-repeat;
  background-position: center center;
  background-attachment: fixed;
  background-size: cover;
}

@mixin _aspect-ratio-padding-top($padding: 0%) {
  padding-top: $padding;
  width: 100%;
  height: 0;
}

@mixin aspect-ratio($width-integer, $height-integer, $pseudo: false) {
  $ratio-percentage: ($height-integer / $width-integer) * 100%;

  position: relative;
  overflow: hidden;

  @if ($pseudo) {
    &::before {
      @include _aspect-ratio-padding-top($ratio-percentage);
      content: '';
      display: block;
    }

    // selector will not include pseudo elements
    > * {
      @include cover(absolute);
    }
  } @else {
    @include _aspect-ratio-padding-top($ratio-percentage);
  }
}

@mixin triangle($direction, $color: currentColor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  content: '';
  // display: block;
  // z-index: 2;
  width: 0;
  height: 0;
  border-#{opposite-direction($direction)}: ($size * 1.5) solid $color;

  $perpendicular-borders: $size solid transparent;
  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}

@mixin svg-arrow ($color, $position: up) {
  $degrees: 0;
  // should allow for passing in dimensions
  $height:  0.6rem;
  $width:   1.8rem;

  @if ($position == down) {
    $degrees: 180 18 6;
  } @else if ($position == left) {
    $degrees: -90 18 18;
    $width:   0.6rem;
    $height:  1.8rem;
  } @else if ($position == right) {
    $degrees: 90 6 6;
    $width:   0.6rem;
    $height:  1.8rem;
  }

  width: $width;
  height: $height;
  background: no-repeat url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="#{$width * 2}" height="#{$height * 2}"><path fill="#{$color}" transform="rotate(#{$degrees})" d="M2.658,0.000 C-13.615,0.000 50.938,0.000 34.662,0.000 C28.662,0.000 23.035,12.002 18.660,12.002 C14.285,12.002 8.594,0.000 2.658,0.000 Z"/></svg>');
  background-size: 100% auto;
}

@mixin link-underline($bottom: 0, $height: 0.1rem) {
  position: relative;

  &::before {
    content: ' ';
    display: block;
    position: absolute;
    bottom: $bottom;
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;
    height: $height;
    background-color: currentColor;
    opacity: 0;
    transition: opacity 260ms ease-in-out;
  }

/*
  &:hover {
    &::before {
      opacity: 1;
    }
  }
*/
}

// Helper Classes
// -----------------------------------------------------------------------------
.hidden {
  display: none !important;
}

.visuallyhidden {
  clip: rect(0 0 0 0);
  overflow: hidden;
  position: absolute;
  margin: -.1rem;
  padding: 0;
  width: .1rem;
  height: .1rem;
  border: 0
}
